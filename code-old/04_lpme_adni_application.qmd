---
title: "Application of LPME Algorithm to ADNI Data"
author: "Robert Zielinski"
date: "June 14, 2024"
output: html_document

execute:
  eval: false
---

This notebook contains the code necessary to run the PME and LPME algorithms on the processed MRI data from the ADNI study. The code assumes that the data for the left hippocampuses, left thalamuses, right hippocampuses, and right thalamuses of all particpants of interest are stored in the following files

- `data/adni_fsl_lhipp_surface.csv`*Path to your R executable*
- `data/adni_fsl_lthal_surface.csv`
- `data/adni_fsl_rhipp_surface.csv`
- `data/adni_fsl_rthal_surface.csv`

The previous notebook, `code/03_adni_mri_preprocess.qmd`, includes the code used to process the MRI data into the proper format.


```{r}
knitr::opts_chunk$set(eval = FALSE)

# load all required packages and custom functions
library(foreach)
library(here)
library(lubridate)
library(plotly)
library(plot3D)
library(pme)
library(pracma)
library(RColorBrewer)
library(Rfast)
library(tidyverse)

source(here("code/functions/calc_pme_est.R"))
source(here("code/functions/calc_lpme_est_params.R"))
source(here("code/functions/estimate_volume.R"))
source(here("code/functions/interior_identification.R"))
source(here("code/functions/create_cross_section_matrix.R"))
```


```{r}
# read surface voxel data for the structures of interest
lhipp_surface <- read_csv(here("data/adni_fsl_lhipp_surface.csv"))
lthal_surface <- read_csv(here("data/adni_fsl_lthal_surface.csv"))
rhipp_surface <- read_csv(here("data/adni_fsl_rhipp_surface.csv"))
rthal_surface <- read_csv(here("data/adni_fsl_rthal_surface.csv"))

# read FSL-generated volume data for hippocampus and thalamus structures
hipp_info <- read_csv(here("data/adni_fsl_hipp_info.csv"))
thal_info <- read_csv(here("data/adni_fsl_thal_info.csv"))
```

```{r}
# create data frames to store volume data from hippocampus and thalamus estimates
est_hipp_info <- data.frame(
  patno = character(),
  date = numeric(),
  lhipp_data_vol2 = numeric(),
  lhipp_vol_lpme1 = numeric(),
  lhipp_vol_lpme2 = numeric(),
  lhipp_vol_pme1 = numeric(),
  lhipp_vol_pme2 = numeric(),
  rhipp_data_vol2 = numeric(),
  rhipp_vol_lpme1 = numeric(),
  rhipp_vol_lpme2 = numeric(),
  rhipp_vol_pme1 = numeric(),
  rhipp_vol_pme2 = numeric()
)

est_thal_info <- data.frame(
  patno = character(),
  date = numeric(),
  lthal_data_vol2 = numeric(),
  lthal_vol_lpme1 = numeric(),
  lthal_vol_lpme2 = numeric(),
  lthal_vol_pme1 = numeric(),
  lthal_vol_pme2 = numeric(),
  rthal_data_vol2 = numeric(),
  rthal_vol_lpme1 = numeric(),
  rthal_vol_lpme2 = numeric(),
  rthal_vol_pme1 = numeric(),
  rthal_vol_pme2 = numeric()
)
```

```{r}
# process scan dates
lhipp_surface <- lhipp_surface %>%
  mutate(
    scan_date = gsub("\\.0", "", scan_date),
    scan_date = ymd_hms(scan_date),
    scan_date = decimal_date(scan_date)
  )
lthal_surface <- lthal_surface %>%
  mutate(
    scan_date = gsub("\\.0", "", scan_date),
    scan_date = ymd_hms(scan_date),
    scan_date = decimal_date(scan_date)
  )
rhipp_surface <- rhipp_surface %>%
  mutate(
    scan_date = gsub("\\.0", "", scan_date),
    scan_date = ymd_hms(scan_date),
    scan_date = decimal_date(scan_date)
  )
rthal_surface <- rthal_surface %>%
  mutate(
    scan_date = gsub("\\.0", "", scan_date),
    scan_date = ymd_hms(scan_date),
    scan_date = decimal_date(scan_date)
  )

hipp_info <- hipp_info %>%
  mutate(
    date = gsub("\\.0", "", date),
    date = ymd_hms(date),
    date = decimal_date(date)
  )
thal_info <- thal_info %>%
  mutate(
    date = gsub("\\.0", "", date),
    date = ymd_hms(date),
    date = decimal_date(date)
  )

# calculate mean, max, and sd of voxel coordinates
lhipp_surface_centers <- lhipp_surface %>%
  group_by(patno, scan_date) %>%
  summarize(
    mean_x = mean(x),
    mean_y = mean(y),
    mean_z = mean(z),
    max_x = max(abs(x)),
    max_y = max(abs(y)),
    max_z = max(abs(z)),
    sd_x = sd(x),
    sd_y = sd(y),
    sd_z = sd(z)
  )

lthal_surface_centers <- lthal_surface %>%
  group_by(patno, scan_date) %>%
  summarize(
    mean_x = mean(x),
    mean_y = mean(y),
    mean_z = mean(z),
    max_x = max(abs(x)),
    max_y = max(abs(y)),
    max_z = max(abs(z)),
    sd_x = sd(x),
    sd_y = sd(y),
    sd_z = sd(z)
  )

rhipp_surface_centers <- rhipp_surface %>%
  group_by(patno, scan_date) %>%
  summarize(
    mean_x = mean(x),
    mean_y = mean(y),
    mean_z = mean(z),
    max_x = max(abs(x)),
    max_y = max(abs(y)),
    max_z = max(abs(z)),
    sd_x = sd(x),
    sd_y = sd(y),
    sd_z = sd(z)
  )

rthal_surface_centers <- rthal_surface %>%
  group_by(patno, scan_date) %>%
  summarize(
    mean_x = mean(x),
    mean_y = mean(y),
    mean_z = mean(z),
    max_x = max(abs(x)),
    max_y = max(abs(y)),
    max_z = max(abs(z)),
    sd_x = sd(x),
    sd_y = sd(y),
    sd_z = sd(z)
  )

```

```{r}
# for each participant, calculate the date of their baseline visit and
# the date of their final visit
lhipp_bl <- lhipp_surface %>%
  group_by(patno) %>%
  arrange(scan_date) %>%
  summarize(
    time_bl = first(scan_date),
    max_time = max(scan_date)
  ) %>%
  # study duration for this participant is the difference between the dates
  # of their first and last visits
  mutate(duration = max_time - time_bl)

lthal_bl <- lthal_surface %>%
  group_by(patno) %>%
  arrange(scan_date) %>%
  summarize(
    time_bl = first(scan_date),
    max_time = max(scan_date)
  ) %>%
  mutate(duration = max_time - time_bl)

rhipp_bl <- rhipp_surface %>%
  group_by(patno) %>%
  arrange(scan_date) %>%
  summarize(
    time_bl = first(scan_date),
    max_time = max(scan_date)
  ) %>%
  mutate(duration = max_time - time_bl)

rthal_bl <- rthal_surface %>%
  group_by(patno) %>%
  arrange(scan_date) %>%
  summarize(
    time_bl = first(scan_date),
    max_time = max(scan_date)
  ) %>%
  mutate(duration = max_time - time_bl)
```

```{r}
# center and standardize data
lhipp_surface <- lhipp_surface %>%
  full_join(lhipp_surface_centers, by = c("patno", "scan_date")) %>%
  full_join(lhipp_bl, by = "patno") %>%
  mutate(
    x = (x - mean_x) / max_x,
    y = (y - mean_y) / max_y,
    z = (z - mean_z) / max_z,
    time_from_bl = scan_date - time_bl
  )

lthal_surface <- lthal_surface %>%
  full_join(lthal_surface_centers, by = c("patno", "scan_date")) %>%
  full_join(lthal_bl, by = "patno") %>%
  mutate(
    x = (x - mean_x) / max_x,
    y = (y - mean_y) / max_y,
    z = (z - mean_z) / max_z,
    time_from_bl = scan_date - time_bl
  )

rhipp_surface <- rhipp_surface %>%
  full_join(rhipp_surface_centers, by = c("patno", "scan_date")) %>%
  full_join(rhipp_bl, by = "patno") %>%
  mutate(
    x = (x - mean_x) / max_x,
    y = (y - mean_y) / max_y,
    z = (z - mean_z) / max_z,
    time_from_bl = scan_date - time_bl
  )

rthal_surface <- rthal_surface %>%
  full_join(rthal_surface_centers, by = c("patno", "scan_date")) %>%
  full_join(rthal_bl, by = "patno") %>%
  mutate(
    x = (x - mean_x) / max_x,
    y = (y - mean_y) / max_y,
    z = (z - mean_z) / max_z,
    time_from_bl = scan_date - time_bl
  )
```

```{r}
# exclude participants with duration shorter than 2 years
lhipp_patnos <- lhipp_surface %>%
  filter(duration > 2) %>%
  .$patno %>%
  unique()

lhipp_surface <- lhipp_surface %>%
  filter(patno %in% lhipp_patnos)

lthal_surface <- lthal_surface %>%
  filter(patno %in% lhipp_patnos)

rhipp_surface <- rhipp_surface %>%
  filter(patno %in% lhipp_patnos)

rthal_surface <- rthal_surface %>%
  filter(patno %in% lhipp_patnos)
```

```{r}
# augment data with spherical coordinates
lhipp_surface_spherical <- lhipp_surface %>%
  dplyr::select(x, y, z) %>%
  as.matrix() %>%
  cart2sph() %>%
  as_tibble()

lthal_surface_spherical <- lthal_surface %>%
  dplyr::select(x, y, z) %>%
  as.matrix() %>%
  cart2sph() %>%
  as_tibble()

rhipp_surface_spherical <- rhipp_surface %>%
  dplyr::select(x, y, z) %>%
  as.matrix() %>%
  cart2sph() %>%
  as_tibble()

rthal_surface_spherical <- rthal_surface %>%
  dplyr::select(x, y, z) %>%
  as.matrix() %>%
  cart2sph() %>%
  as_tibble()

lhipp_surface <- bind_cols(lhipp_surface, lhipp_surface_spherical)
lthal_surface <- bind_cols(lthal_surface, lthal_surface_spherical)
rhipp_surface <- bind_cols(rhipp_surface, rhipp_surface_spherical)
rthal_surface <- bind_cols(rthal_surface, rthal_surface_spherical)
```

```{r}
write_csv(lhipp_surface, here("data/adni_lhipp_surface_processed.csv"))
write_csv(lthal_surface, here("data/adni_lthal_surface_processed.csv"))
write_csv(rhipp_surface, here("data/adni_rhipp_surface_processed.csv"))
write_csv(rthal_surface, here("data/adni_rthal_surface_processed.csv"))
```

```{r}
patnos <- lhipp_surface$patno %>%
  unique()

ncores <- parallel::detectCores()
cl <- parallel::makeCluster(ncores / 2, type = "FORK")
doParallel::registerDoParallel(cl)
```

```{r}
set.seed(10283)
foreach(
  patno_val = patnos,
  .packages = c(
    "pme",
    "plotly",
    "plot3D",
    "pracma",
    "RColorBrewer",
    "Rfast",
    "tidyverse"
  ),
  .export = c(
    "calc_pme_est",
    "calc_lpme_est_params",
    "estimate_volume",
    "interior_identification",
    "create_cross_section_matrix"
  )
) %dopar% {
# for (patno_val in patnos) {
  print(patno_val)
  lhipp <- lhipp_surface %>%
    filter(patno == patno_val)
  lthal <- lthal_surface %>%
    filter(patno == patno_val)
  rhipp <- rhipp_surface %>%
    filter(patno == patno_val)
  rthal <- rthal_surface %>%
    filter(patno == patno_val)

  lhipp_mat <- lhipp %>%
    dplyr::select(
      time_from_bl,
      x,
      y,
      z,
      theta,
      phi,
      r
    ) %>%
    as.matrix()

  lthal_mat <- lthal %>%
    filter(patno == patno_val) %>%
    dplyr::select(
      time_from_bl,
      x,
      y,
      z,
      theta,
      phi,
      r
    ) %>%
    as.matrix()

  rhipp_mat <- rhipp %>%
    filter(patno == patno_val) %>%
    dplyr::select(
      time_from_bl,
      x,
      y,
      z,
      theta,
      phi,
      r
    ) %>%
    as.matrix()
  rthal_mat <- rthal %>%
    filter(patno == patno_val) %>%
    dplyr::select(
      time_from_bl,
      x,
      y,
      z,
      theta,
      phi,
      r
    ) %>%
    as.matrix()


  time_vals <- unique(lhipp_mat[, 1])

  print("Fitting LHIPP Models")

  lhipp_lpme_result_isomap <- lpme(
    lhipp_mat,
    d = 2,
    gamma = exp(-15:5),
    lambda = exp(-12:5),
    initialization_algorithm = "isomap",
    init_type = "centers",
    verbose = FALSE,
    print_plots = FALSE
  )
  lhipp_lpme_isomap_est <- calc_lpme_est_params(lhipp_lpme_result_isomap, lhipp_mat)
  lhipp_lpme_isomap_vals <- lhipp_lpme_isomap_est$results
  lhipp_lpme_isomap_params <- lhipp_lpme_isomap_est$params

  lhipp_pme_result <- list()
  lhipp_pme_vals <- list()
  for (t in 1:length(time_vals)) {
    temp_data <- lhipp_mat[lhipp_mat[, 1] == time_vals[t], -1]
    lhipp_pme_result[[t]] <- pme(temp_data, d = 2, lambda = exp(-12:5), verbose = FALSE)
    lhipp_pme_vals[[t]] <- cbind(time_vals[t], calc_pme_est(lhipp_pme_result[[t]], temp_data))
  }
  lhipp_pme_vals <- purrr::reduce(lhipp_pme_vals, rbind)

  patno_path <- here(paste0("results/", patno_val))
  if (!dir.exists(patno_path)) {
    dir.create(patno_path)
  }
  saveRDS(lhipp_lpme_result_isomap, paste0(patno_path, "/adni_lhipp_lpme_isomap.rds"))
  saveRDS(lhipp_pme_result, paste0(patno_path, "/adni_lhipp_pme.rds"))
  write.csv(lhipp_mat, paste0(patno_path, "/adni_lhipp_mat.csv"))
  write.csv(lhipp_lpme_isomap_vals, paste0(patno_path, "/adni_lhipp_lpme_isomap_vals.csv"))
  write.csv(lhipp_pme_vals, paste0(patno_path, "/adni_lhipp_pme_vals.csv"))

  print("Files saved")

  ### VOLUME ESTIMATION

  print("LHIPP Volume Estimation")

  lhipp_lpme_vals <- lhipp_lpme_isomap_vals

  lhipp_data_rescaled <- list()
  lhipp_lpme_rescaled <- list()
  lhipp_pme_rescaled <- list()

  for (time_idx in 1:length(time_vals)) {
    temp_data <- lhipp_mat[lhipp_mat[, 1] == time_vals[time_idx], ]
    temp_lpme <- lhipp_lpme_vals[lhipp_lpme_vals[, 1] == time_vals[time_idx], ]
    temp_pme <- lhipp_pme_vals[lhipp_pme_vals[, 1] == time_vals[time_idx], ]

    temp_max_x <- unique(lhipp[lhipp$time_from_bl == time_vals[time_idx], ]$max_x)
    temp_max_y <- unique(lhipp[lhipp$time_from_bl == time_vals[time_idx], ]$max_y)
    temp_max_z <- unique(lhipp[lhipp$time_from_bl == time_vals[time_idx], ]$max_z)

    temp_data_rescaled <- temp_data[, -(5:7)]
    temp_lpme_rescaled <- temp_lpme[, -(5:7)]
    temp_pme_rescaled <- temp_pme[, -(5:7)]

    temp_data_rescaled[, 2] <- round((temp_data_rescaled[, 2] * temp_max_x) / 1.2)
    temp_data_rescaled[, 3] <- round((temp_data_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_data_rescaled[, 4] <- round((temp_data_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_lpme_rescaled[, 2] <- round((temp_lpme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_lpme_rescaled[, 3] <- round((temp_lpme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_lpme_rescaled[, 4] <- round((temp_lpme_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_pme_rescaled[, 2] <- round((temp_pme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_pme_rescaled[, 3] <- round((temp_pme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_pme_rescaled[, 4] <- round((temp_pme_rescaled[, 4] * temp_max_z) / 0.9375)

    lhipp_data_rescaled[[time_idx]] <- temp_data_rescaled
    lhipp_lpme_rescaled[[time_idx]] <- temp_lpme_rescaled
    lhipp_pme_rescaled[[time_idx]] <- temp_pme_rescaled
  }

  lhipp_data_rescaled_full <- reduce(lhipp_data_rescaled, rbind)
  lhipp_lpme_rescaled_full <- reduce(lhipp_lpme_rescaled, rbind)
  lhipp_pme_rescaled_full <- reduce(lhipp_pme_rescaled, rbind)

  voxel_vol <- 1.2 * 0.9375 * 0.9375

  lhipp_data_volumes <- map(
    lhipp_data_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lhipp_data_volume_points <- map(
    lhipp_data_volumes,
    ~ .x[[2]]
  )

  lhipp_data_volumes <- map(
    lhipp_data_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  lhipp_lpme_volumes <- map(
    lhipp_lpme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lhipp_lpme_volume_points <- map(
    lhipp_lpme_volumes,
    ~ .x[[2]]
  )

  lhipp_lpme_volumes <- map(
    lhipp_lpme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)
  
  lhipp_pme_volumes <- map(
    lhipp_pme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lhipp_pme_volume_points <- map(
    lhipp_pme_volumes,
    ~ .x[[2]]
  )

  lhipp_pme_volumes <- map(
    lhipp_pme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  lhipp_data_volume_points_full <- map(
    1:length(lhipp_data_volume_points),
    ~ cbind(time_vals[.x], lhipp_data_volume_points[[.x]])
  ) %>%
    reduce(rbind)


  lhipp_lpme_volume_points_full <- map(
    1:length(lhipp_lpme_volume_points),
    ~ cbind(time_vals[.x], lhipp_lpme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  lhipp_pme_volume_points_full <- map(
    1:length(lhipp_pme_volume_points),
    ~ cbind(time_vals[.x], lhipp_pme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  print("Fitting LTHAL Models")

  lthal_lpme_result_isomap <- lpme(
    lthal_mat,
    d = 2,
    gamma = exp(-15:5),
    lambda = exp(-12:5),
    initialization_algorithm = "isomap",
    init_type = "centers",
    verbose = FALSE,
    print_plots = FALSE
  )
  lthal_lpme_isomap_est <- calc_lpme_est_params(lthal_lpme_result_isomap, lthal_mat)
  lthal_lpme_isomap_vals <- lthal_lpme_isomap_est$results
  lthal_lpme_isomap_params <- lthal_lpme_isomap_est$params

  lthal_pme_result <- list()
  lthal_pme_vals <- list()
  for (t in 1:length(time_vals)) {
    temp_data <- lthal_mat[lthal_mat[, 1] == time_vals[t], -1]
    lthal_pme_result[[t]] <- pme(temp_data, d = 2, lambda = exp(-12:5), verbose = FALSE)
    lthal_pme_vals[[t]] <- cbind(time_vals[t], calc_pme_est(lthal_pme_result[[t]], temp_data))
  }
  lthal_pme_vals <- reduce(lthal_pme_vals, rbind)

  saveRDS(lthal_lpme_result_isomap, paste0(patno_path, "/adni_lthal_lpme_isomap.rds"))
  saveRDS(lthal_pme_result, paste0(patno_path, "/adni_lthal_pme.rds"))
  write.csv(lthal_mat, paste0(patno_path, "/adni_lthal_mat.csv"))
  write.csv(lthal_lpme_isomap_vals, paste0(patno_path, "/adni_lthal_lpme_isomap_vals.csv"))
  write.csv(lthal_pme_vals, paste0(patno_path, "/adni_lthal_pme_vals.csv"))

  print("LTHAL Files Saved")

  ### VOLUME ESTIMATION

  print("LTHAL Volume Estimation")

  lthal_lpme_vals <- lthal_lpme_isomap_vals

  lthal_data_rescaled <- list()
  lthal_lpme_rescaled <- list()
  lthal_pme_rescaled <- list()

  for (time_idx in 1:length(time_vals)) {
    temp_data <- lthal_mat[lthal_mat[, 1] == time_vals[time_idx], ]
    temp_lpme <- lthal_lpme_vals[lthal_lpme_vals[, 1] == time_vals[time_idx], ]
    temp_pme <- lthal_pme_vals[lthal_pme_vals[, 1] == time_vals[time_idx], ]

    temp_max_x <- unique(lthal[lthal$time_from_bl == time_vals[time_idx], ]$max_x)
    temp_max_y <- unique(lthal[lthal$time_from_bl == time_vals[time_idx], ]$max_y)
    temp_max_z <- unique(lthal[lthal$time_from_bl == time_vals[time_idx], ]$max_z)

    temp_data_rescaled <- temp_data[, -(5:7)]
    temp_lpme_rescaled <- temp_lpme[, -(5:7)]
    temp_pme_rescaled <- temp_pme[, -(5:7)]

    temp_data_rescaled[, 2] <- round((temp_data_rescaled[, 2] * temp_max_x) / 1.2)
    temp_data_rescaled[, 3] <- round((temp_data_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_data_rescaled[, 4] <- round((temp_data_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_lpme_rescaled[, 2] <- round((temp_lpme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_lpme_rescaled[, 3] <- round((temp_lpme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_lpme_rescaled[, 4] <- round((temp_lpme_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_pme_rescaled[, 2] <- round((temp_pme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_pme_rescaled[, 3] <- round((temp_pme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_pme_rescaled[, 4] <- round((temp_pme_rescaled[, 4] * temp_max_z) / 0.9375)

    lthal_data_rescaled[[time_idx]] <- temp_data_rescaled
    lthal_lpme_rescaled[[time_idx]] <- temp_lpme_rescaled
    lthal_pme_rescaled[[time_idx]] <- temp_pme_rescaled
  }

  lthal_data_rescaled_full <- reduce(lthal_data_rescaled, rbind)
  lthal_lpme_rescaled_full <- reduce(lthal_lpme_rescaled, rbind)
  lthal_pme_rescaled_full <- reduce(lthal_pme_rescaled, rbind)

  voxel_vol <- 1.2 * 0.9375 * 0.9375

  lthal_data_volumes <- map(
    lthal_data_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lthal_data_volume_points <- map(
    lthal_data_volumes,
    ~ .x[[2]]
  )

  lthal_data_volumes <- map(
    lthal_data_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  lthal_lpme_volumes <- map(
    lthal_lpme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lthal_lpme_volume_points <- map(
    lthal_lpme_volumes,
    ~ .x[[2]]
  )

  lthal_lpme_volumes <- map(
    lthal_lpme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  lthal_pme_volumes <- map(
    lthal_pme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  lthal_pme_volume_points <- map(
    lthal_pme_volumes,
    ~ .x[[2]]
  )

  lthal_pme_volumes <- map(
    lthal_pme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  lthal_data_volume_points_full <- map(
    1:length(lthal_data_volume_points),
    ~ cbind(time_vals[.x], lthal_data_volume_points[[.x]])
  ) %>%
    reduce(rbind)


  lthal_lpme_volume_points_full <- map(
    1:length(lthal_lpme_volume_points),
    ~ cbind(time_vals[.x], lthal_lpme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  lthal_pme_volume_points_full <- map(
    1:length(lthal_pme_volume_points),
    ~ cbind(time_vals[.x], lthal_pme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  print("Fitting RHIPP Models")

  rhipp_lpme_result_isomap <- lpme(
    rhipp_mat,
    d = 2,
    gamma = exp(-15:5),
    lambda = exp(-12:5),
    initialization_algorithm = "isomap",
    init_type = "centers",
    verbose = FALSE,
    print_plots = FALSE
  )
  rhipp_lpme_isomap_est <- calc_lpme_est_params(rhipp_lpme_result_isomap, rhipp_mat)
  rhipp_lpme_isomap_vals <- rhipp_lpme_isomap_est$results
  rhipp_lpme_isomap_params <- rhipp_lpme_isomap_est$params

  rhipp_pme_result <- list()
  rhipp_pme_vals <- list()
  for (t in 1:length(time_vals)) {
    temp_data <- rhipp_mat[rhipp_mat[, 1] == time_vals[t], -1]
    rhipp_pme_result[[t]] <- pme(temp_data, d = 2, lambda = exp(-12:5), verbose = FALSE)
    rhipp_pme_vals[[t]] <- cbind(time_vals[t], calc_pme_est(rhipp_pme_result[[t]], temp_data))
  }
  rhipp_pme_vals <- reduce(rhipp_pme_vals, rbind)

  saveRDS(rhipp_lpme_result_isomap, paste0(patno_path, "/adni_rhipp_lpme_isomap.rds"))
  saveRDS(rhipp_pme_result, paste0(patno_path, "/adni_rhipp_pme.rds"))
  write.csv(rhipp_mat, paste0(patno_path, "/adni_rhipp_mat.csv"))
  write.csv(rhipp_lpme_isomap_vals, paste0(patno_path, "/adni_rhipp_lpme_isomap_vals.csv"))
  write.csv(rhipp_pme_vals, paste0(patno_path, "/adni_rhipp_pme_vals.csv"))

  print("RHIPP Files Saved")

  #### VOLUME ESTIMATION

  # Voxel dimension: 1.2mm x 0.9375mm x 0.9375mm
  # Voxel volume: 1.054688 mm^3
  print("RHIPP Volume Estimation")
  ### VOLUME ESTIMATION

  rhipp_lpme_vals <- rhipp_lpme_isomap_vals

  rhipp_data_rescaled <- list()
  rhipp_lpme_rescaled <- list()
  rhipp_pme_rescaled <- list()

  for (time_idx in 1:length(time_vals)) {
    temp_data <- rhipp_mat[rhipp_mat[, 1] == time_vals[time_idx], ]
    temp_lpme <- rhipp_lpme_vals[rhipp_lpme_vals[, 1] == time_vals[time_idx], ]
    temp_pme <- rhipp_pme_vals[rhipp_pme_vals[, 1] == time_vals[time_idx], ]

    temp_max_x <- unique(rhipp[rhipp$time_from_bl == time_vals[time_idx], ]$max_x)
    temp_max_y <- unique(rhipp[rhipp$time_from_bl == time_vals[time_idx], ]$max_y)
    temp_max_z <- unique(rhipp[rhipp$time_from_bl == time_vals[time_idx], ]$max_z)

    temp_data_rescaled <- temp_data[, -(5:7)]
    temp_lpme_rescaled <- temp_lpme[, -(5:7)]
    temp_pme_rescaled <- temp_pme[, -(5:7)]

    temp_data_rescaled[, 2] <- round((temp_data_rescaled[, 2] * temp_max_x) / 1.2)
    temp_data_rescaled[, 3] <- round((temp_data_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_data_rescaled[, 4] <- round((temp_data_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_lpme_rescaled[, 2] <- round((temp_lpme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_lpme_rescaled[, 3] <- round((temp_lpme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_lpme_rescaled[, 4] <- round((temp_lpme_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_pme_rescaled[, 2] <- round((temp_pme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_pme_rescaled[, 3] <- round((temp_pme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_pme_rescaled[, 4] <- round((temp_pme_rescaled[, 4] * temp_max_z) / 0.9375)

    rhipp_data_rescaled[[time_idx]] <- temp_data_rescaled
    rhipp_lpme_rescaled[[time_idx]] <- temp_lpme_rescaled
    rhipp_pme_rescaled[[time_idx]] <- temp_pme_rescaled
  }

  rhipp_data_rescaled_full <- reduce(rhipp_data_rescaled, rbind)
  rhipp_lpme_rescaled_full <- reduce(rhipp_lpme_rescaled, rbind)
  rhipp_pme_rescaled_full <- reduce(rhipp_pme_rescaled, rbind)

  voxel_vol <- 1.2 * 0.9375 * 0.9375

  rhipp_data_volumes <- map(
    rhipp_data_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rhipp_data_volume_points <- map(
    rhipp_data_volumes,
    ~ .x[[2]]
  )

  rhipp_data_volumes <- map(
    rhipp_data_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rhipp_lpme_volumes <- map(
    rhipp_lpme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rhipp_lpme_volume_points <- map(
    rhipp_lpme_volumes,
    ~ .x[[2]]
  )

  rhipp_lpme_volumes <- map(
    rhipp_lpme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rhipp_pme_volumes <- map(
    rhipp_pme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rhipp_pme_volume_points <- map(
    rhipp_pme_volumes,
    ~ .x[[2]]
  )

  rhipp_pme_volumes <- map(
    rhipp_pme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rhipp_data_volume_points_full <- map(
    1:length(rhipp_data_volume_points),
    ~ cbind(time_vals[.x], rhipp_data_volume_points[[.x]])
  ) %>%
    reduce(rbind)


  rhipp_lpme_volume_points_full <- map(
    1:length(rhipp_lpme_volume_points),
    ~ cbind(time_vals[.x], rhipp_lpme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  rhipp_pme_volume_points_full <- map(
    1:length(rhipp_pme_volume_points),
    ~ cbind(time_vals[.x], rhipp_pme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  print("Fitting RTHAL Models")
  rthal_lpme_result_isomap <- lpme(
    rthal_mat,
    d = 2,
    gamma = exp(-15:5),
    lambda = exp(-12:5),
    initialization_algorithm = "isomap",
    init_type = "centers",
    verbose = FALSE,
    print_plots = FALSE
  )
  rthal_lpme_isomap_est <- calc_lpme_est_params(rthal_lpme_result_isomap, rthal_mat)
  rthal_lpme_isomap_vals <- rthal_lpme_isomap_est$results
  rthal_lpme_isomap_params <- rthal_lpme_isomap_est$params

  rthal_pme_result <- list()
  rthal_pme_vals <- list()
  for (t in 1:length(time_vals)) {
    temp_data <- rthal_mat[rthal_mat[, 1] == time_vals[t], -1]
    rthal_pme_result[[t]] <- pme(temp_data, d = 2, lambda = exp(-12:5), verbose = FALSE)
    rthal_pme_vals[[t]] <- cbind(time_vals[t], calc_pme_est(rthal_pme_result[[t]], temp_data))
  }
  rthal_pme_vals <- reduce(rthal_pme_vals, rbind)

  saveRDS(rthal_lpme_result_isomap, paste0(patno_path, "/adni_rthal_lpme_isomap.rds"))
  saveRDS(rthal_pme_result, paste0(patno_path, "/adni_rthal_pme.rds"))
  write.csv(rthal_mat, paste0(patno_path, "/adni_rthal_mat.csv"))
  write.csv(rthal_lpme_isomap_vals, paste0(patno_path, "/adni_rthal_lpme_isomap_vals.csv"))
  write.csv(rthal_pme_vals, paste0(patno_path, "/adni_rthal_pme_vals.csv"))

  print("RTHAL Files Saved")

  ### VOLUME ESTIMATION

  print("RTHAL Volume Estimation")
  rthal_lpme_vals <- rthal_lpme_isomap_vals

  rthal_data_rescaled <- list()
  rthal_lpme_rescaled <- list()
  rthal_pme_rescaled <- list()

  for (time_idx in 1:length(time_vals)) {
    temp_data <- rthal_mat[rthal_mat[, 1] == time_vals[time_idx], ]
    temp_lpme <- rthal_lpme_vals[rthal_lpme_vals[, 1] == time_vals[time_idx], ]
    temp_pme <- rthal_pme_vals[rthal_pme_vals[, 1] == time_vals[time_idx], ]

    temp_max_x <- unique(rthal[rthal$time_from_bl == time_vals[time_idx], ]$max_x)
    temp_max_y <- unique(rthal[rthal$time_from_bl == time_vals[time_idx], ]$max_y)
    temp_max_z <- unique(rthal[rthal$time_from_bl == time_vals[time_idx], ]$max_z)

    temp_data_rescaled <- temp_data[, -(5:7)]
    temp_lpme_rescaled <- temp_lpme[, -(5:7)]
    temp_pme_rescaled <- temp_pme[, -(5:7)]

    temp_data_rescaled[, 2] <- round((temp_data_rescaled[, 2] * temp_max_x) / 1.2)
    temp_data_rescaled[, 3] <- round((temp_data_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_data_rescaled[, 4] <- round((temp_data_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_lpme_rescaled[, 2] <- round((temp_lpme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_lpme_rescaled[, 3] <- round((temp_lpme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_lpme_rescaled[, 4] <- round((temp_lpme_rescaled[, 4] * temp_max_z) / 0.9375)

    temp_pme_rescaled[, 2] <- round((temp_pme_rescaled[, 2] * temp_max_x) / 1.2)
    temp_pme_rescaled[, 3] <- round((temp_pme_rescaled[, 3] * temp_max_y) / 0.9375)
    temp_pme_rescaled[, 4] <- round((temp_pme_rescaled[, 4] * temp_max_z) / 0.9375)

    rthal_data_rescaled[[time_idx]] <- temp_data_rescaled
    rthal_lpme_rescaled[[time_idx]] <- temp_lpme_rescaled
    rthal_pme_rescaled[[time_idx]] <- temp_pme_rescaled
  }

  rthal_data_rescaled_full <- reduce(rthal_data_rescaled, rbind)
  rthal_lpme_rescaled_full <- reduce(rthal_lpme_rescaled, rbind)
  rthal_pme_rescaled_full <- reduce(rthal_pme_rescaled, rbind)

  voxel_vol <- 1.2 * 0.9375 * 0.9375

  rthal_data_volumes <- map(
    rthal_data_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rthal_data_volume_points <- map(
    rthal_data_volumes,
    ~ .x[[2]]
  )

  rthal_data_volumes <- map(
    rthal_data_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rthal_lpme_volumes <- map(
    rthal_lpme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rthal_lpme_volume_points <- map(
    rthal_lpme_volumes,
    ~ .x[[2]]
  )

  rthal_lpme_volumes <- map(
    rthal_lpme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rthal_pme_volumes <- map(
    rthal_pme_rescaled,
    ~ estimate_volume(.x[, -1], voxel_vol)
  )

  rthal_pme_volume_points <- map(
    rthal_pme_volumes,
    ~ .x[[2]]
  )

  rthal_pme_volumes <- map(
    rthal_pme_volumes,
    ~ .x[[1]]
  ) %>%
    reduce(c)

  rthal_data_volume_points_full <- map(
    1:length(rthal_data_volume_points),
    ~ cbind(time_vals[.x], rthal_data_volume_points[[.x]])
  ) %>%
    reduce(rbind)


  rthal_lpme_volume_points_full <- map(
    1:length(rthal_lpme_volume_points),
    ~ cbind(time_vals[.x], rthal_lpme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  rthal_pme_volume_points_full <- map(
    1:length(rthal_pme_volume_points),
    ~ cbind(time_vals[.x], rthal_pme_volume_points[[.x]])
  ) %>%
    reduce(rbind)

  dates <- unique(lhipp$time_bl) + time_vals

  print("Creating Temporary Files...")

  temp_hipp_info <- tibble(
    patno = patno_val,
    date = dates,
    lhipp_data_vol = lhipp_data_volumes,
    lhipp_vol_lpme = lhipp_lpme_volumes,
    lhipp_vol_pme = lhipp_pme_volumes,
    rhipp_data_vol = rhipp_data_volumes,
    rhipp_vol_lpme = rhipp_lpme_volumes,
    rhipp_vol_pme = rhipp_pme_volumes
  )

  temp_thal_info <- tibble(
    patno = patno_val,
    date = dates,
    lthal_data_vol = lthal_data_volumes,
    lthal_vol_lpme = lthal_lpme_volumes,
    lthal_vol_pme = lthal_pme_volumes,
    rthal_data_vol = rthal_data_volumes,
    rthal_vol_lpme = rthal_lpme_volumes,
    rthal_vol_pme = rthal_pme_volumes
  )

  est_hipp_info <- bind_rows(est_hipp_info, temp_hipp_info)
  est_thal_info <- bind_rows(est_thal_info, temp_thal_info)

  write.csv(temp_hipp_info, file = paste0(patno_path, "/hipp_info.csv"))
  write.csv(temp_thal_info, file = paste0(patno_path, "/thal_info.csv"))

  print("Temporary Files Saved")
}

parallel::stopCluster(cl)
```

```{r}
write.csv(est_hipp_info, here("results/est_hipp_info.csv"))
write.csv(est_thal_info, here("results/est_thal_info.csv"))
```
